// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindMaze.Infrastructure.infrastructure.Data;

#nullable disable

namespace MindMaze.Infrastructure.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MindMaze.Core.Domain.Games", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MyPoint")
                        .HasColumnType("int");

                    b.Property<int>("OpponentPoint")
                        .HasColumnType("int");

                    b.Property<Guid>("Opponent_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Opponent_ID");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.GamesQuestions", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Game_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Question_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("Game_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("GamesQuestions", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.MyFriends", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Friend_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Friend_Token_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("User_Token_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Friend_ID");

                    b.ToTable("MyFriends", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Notifications", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Recevier_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sender_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Sender_ID");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Questions", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FakeAnswer1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FakeAnswer2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FakeAnswer3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Users", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PassWordKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PassWordResetExpire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordVerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Games", b =>
                {
                    b.HasOne("MindMaze.Core.Domain.Users", "Opponent")
                        .WithMany("Games")
                        .HasForeignKey("Opponent_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opponent");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.GamesQuestions", b =>
                {
                    b.HasOne("MindMaze.Core.Domain.Games", "Game")
                        .WithMany("gamesQuestions")
                        .HasForeignKey("Game_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindMaze.Core.Domain.Questions", "Question")
                        .WithMany("GamesQuestions")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.MyFriends", b =>
                {
                    b.HasOne("MindMaze.Core.Domain.Users", "Friend")
                        .WithMany("MyFirends")
                        .HasForeignKey("Friend_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Notifications", b =>
                {
                    b.HasOne("MindMaze.Core.Domain.Users", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("Sender_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Games", b =>
                {
                    b.Navigation("gamesQuestions");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Questions", b =>
                {
                    b.Navigation("GamesQuestions");
                });

            modelBuilder.Entity("MindMaze.Core.Domain.Users", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("MyFirends");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
